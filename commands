#!/bin/bash

# ------------------------------------------------------------------------------------------------
# disk free - Displays disk space in human readable format showing specific file system types
df -Th

# ------------------------------------------------------------------------------------------------
# disk usage - Displays disk usage of all files and folders in human readeable format
du -ah /home/foo

# ------------------------------------------------------------------------------------------------
# Lists blocks devices
lsblk

# ------------------------------------------------------------------------------------------------
# Concatenate 2 files
cat file2 >> file1

# ------------------------------------------------------------------------------------------------
# Show the date using format dd/mm/yyyy - hh:mm:ss
date "+%d-%m-%Y - %H:%M:%S"

# ------------------------------------------------------------------------------------------------
# Show number of apparences of the character ',' in a filtered line of the file foo.txt
grep "extern int foo" foo.txt | tr -dc "," | wc -m

# ------------------------------------------------------------------------------------------------
# All those commands using find are recursive
# Search file foo.bar
find . -name "foo.bar"
# Search files with extension png
find . -name "*.png"
# Search files starting with foo
find . -name "foo*"
# Search files ending with foo
find . -name "*foo"
# Search files containing foo
find . -name "*foo*"
# Same than previous calls but case insensitive (find "abc" and also "aBc")
find . -iname "abc"
# Replace all ocurrences of foo with bar in a folder
find . -type f -exec sed -i 's/foo/bar/g' {} +
# Same but filtering files with .c or .cpp or .h
find . -regex '.*/.*\.\(c\|cpp\|h\)$' -exec sed -i 's/foo/bar/g' {} +
# Search .js files not starting with "use strict"
find . -name '*.js' -exec grep -L "^use strict" {} +
find . -name '*.js' | xargs grep -L '^use strict'
# Find all ocurrences of foo in a folder
find . -type f -exec grep "foo" {} +
# Find and show the 20 bigger files sorted by size
find . -type f -printf '%s %p\n' | sort -nr | head -20

# ------------------------------------------------------------------------------------------------
# Pack
tar -cvf foo.tar foo
# Pack multiple
tar -cvf foo.tar.gz /home/foo /home/bar
# Pack multiple excluding
tar -cvf foo.tar.gz /home/foobar --exclude=/home/foo --exclude=/home/bar
# Unpack
tar -xvf foo.tar

# ------------------------------------------------------------------------------------------------
# Compress
tar -czvf foo.tar.gz foo
# Compress multiple
tar -czvf foo.tar.gz /home/foo /home/bar
# Compress multiple excluding
tar -czvf foo.tar.gz /home/foobar --exclude=/home/foo --exclude=/home/bar
# Uncompress
tar -xzvf foo.tar.gz

# ------------------------------------------------------------------------------------------------
# Generate random UUID
uuidgen
# Generate random UUID replacing all ocurrences of minus with underscore
uuidgen | sed "s/-/_/g"

# ------------------------------------------------------------------------------------------------
# Execute a line of history (where 42 is the line marked in the ouptput)
history
!42
# View one page at a time
history | less
# View last 10 lines
history | tail
# View last 25 lines
history 25
# Delete line 42
history -d 42
# Delete from line 42 to line 50
history -d 42-50
# Delete all lines starting from line 42 
history -d 42-$((HISTCMD-1))
# Execute a command without leaving any trace in history
history -d $((HISTCMD-1)) && your_command
# Delete all entries in history
history -c
# Get index of next line in history 
echo $HISTCMD
# See history file
cat $HOME/.bash_history
# Give more room to history
echo "export HISTSIZE=1000" >> ~/.bashrc
# Show the 5 most used commands
history | awk '{print $2}' | awk 'BEGIN {FS="|"} {print $1}' | sort | uniq -c | sort -rn | head -5

# ------------------------------------------------------------------------------------------------
# Show all processes
ps -e
# Show all processes with more details
ps -el
# Show the PID of a process
pidof firefox
# Show the PID of a process (another way)
pgrep firefox
# Combined with kill
kill $(pgrep firefox)
# Show running processes as a tree
pstree
# Show a running process as a tree
pstree -p $(pgrep firefox)

# ------------------------------------------------------------------------------------------------
# Convert UTF8 to ASCII
echo cañón | iconv -f utf-8 -t ascii//TRANSLIT

# ------------------------------------------------------------------------------------------------
# Download in quiet mode a raw file from github and store the file in a temp folder
wget -q https://raw.githubusercontent.com/davranfor/linux/main/commands -O $HOME/temp/commands

# ------------------------------------------------------------------------------------------------
# ssh connect
ssh user@domain
# ssh connect on a port other than 22
ssh user@domain -p 2222
# ssh connect with graphical user interface
ssh -X user@domain program
# Secure copy using scp
# --> scp -P 2222 --> to specify a port
# --> scp -r --> to copy a directory
# copy a local file to a remote system
scp file.txt user@domain:/remote/directory
# copy a remote file to a local file
scp user@domain:/remote/file file.txt

# ------------------------------------------------------------------------------------------------
# Take a screenshot of the current focused window in a second and save it as shot.png
gnome-screenshot --window --remove-border --delay=1 -f shot.png

# ------------------------------------------------------------------------------------------------
# Open all files in current directory with gedit
gedit *.* &

# ------------------------------------------------------------------------------------------------
# An alternative to gksu
# Adds alias at the bottom
echo "# An alternative to gksu" | tee -a ~/.bash_aliases
echo alias gksu=\''pkexec env DISPLAY=$DISPLAY XAUTHORITY=$XAUTHORITY'\' | tee -a ~/.bash_aliases

# ------------------------------------------------------------------------------------------------
# Profile with valgrind
valgrind --tool=callgrind ./demo
kcachegrind callgrind.out.id

# ------------------------------------------------------------------------------------------------
# Compile and run with make
CFLAGS="-std=c11 -Wpedantic -Wall -Wextra" make demo && ./demo

# ------------------------------------------------------------------------------------------------
# Bash
# ------------------------------------------------------------------------------------------------
# Executes command2 only if command1 completes successfully
command1 && command2
# Another way
if command1; then
command2
# ------------------------------------------------------------------------------------------------
# for each dir
#!/bin/bash
for d in */ ; do
    echo "$d"
done
# ------------------------------------------------------------------------------------------------
# for each dir recursive
#!/bin/bash
for d in $(find . -type d); do
    echo "$d"
done
# ------------------------------------------------------------------------------------------------
#!/bin/bash
# For each .c file in this folder (sorted by filename)
for f in *.c; do
    [ -f "$f" ] || break
    # grep lines starting with a letter or underscore 
    #          and ending with ')' or '{' or '}' ignoring trailing spaces
    grep --with-filename --line-number --color '^[a-z|A-Z|_].*[)|{|} ]$' $f
done
# ------------------------------------------------------------------------------------------------
# Do not echo input coming from a terminal
read -s -p "Enter password:" input
echo
echo "Your password is" \'$input\'
# ------------------------------------------------------------------------------------------------
# Run script if user is root
#!/bin/bash
if [[ $EUID -ne 0 ]]; then
    echo "You must be root to run this script"
    exit 1   
fi
echo "Hello root"

